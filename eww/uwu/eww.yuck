(deflisten window      "scripts/hyprland window")
(deflisten workspaces :initial "[]"  "scripts/hyprland")
(defvar focused  "hyprctl activeworkspace -j | jq .id")


(defwindow bar
    :monitor 1
    :exclusive true
    :stacking "fg"
    :focusable false
    :geometry (geometry :width "2%"
                        :height "2%"
                        :anchor "center left")(bar))

(defwidget bar [] (box
                    :orientation "v"
                    :class "vpanel floating"
                    (box
                      :class "leftBar"
                      :space-evenly false
                      :valign "start"
                      :orientation "v"
                      (panel_workspaces :orientation "v")
        )
    ))

(defwidget panel_workspaces [orientation] (box :class "button-bin"
    (eventbox :class "button workspaces"
        (box
            :space-evenly false
            :orientation orientation
          (for workspace in workspaces
            (button 
              :class "workspace-btn"
              :onclick "hyprctl dispatch workspace ${workspace.id}"
              (label :class "icon" :text "${workspace.id == focused ? "active" : ""}")))))))
              
; (defwidget panel_workspaces [orientation] (box :class "button-bin"
;     (eventbox :class "button workspaces"
;         (box
;             :space-evenly false
;             :orientation orientation
;             (for workspace in {workspaces.workspaces}
;                 (button
                    ; :class "workspace-btn ${workspace.id == 1 ? "active" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                    ; :class "workspace-btn empty"
                    ; :onclick "hyprctl dispatch workspace 2"
                    ; :valign "center"
                    ; (label :class "icon" :text "1")
                    ; (label :class "icon" :text {workspace.windows > 0 ? "${workspace.id == "1" ? "" : ""}" : ""})
;                 )
;             )
;         )
;     )
; ))

; (defwidget panel_window [angle] (eventbox :class "button-bin"
;     (button :class "button window" 
;         (label
;             :visible {window != "null" ? true : false}
;             :text {window}
;             :angle angle)
;     )
; ))

; (defwidget panel_separator [orientation dots visible] (box
;     :orientation orientation
;     :class "separator"
;     :space-evenly false
;     :visible visible
;     (for dot in dots
;         (box :class "dot" :halign "center" :hexpand true :valign "center"))))
;
; (defwidget controls_slider [control reveal value onchange icon orientation transition] (eventbox
;     :onscroll "${EWW_CONFIG_DIR}/scripts/${control} {}"
;     :onhover "${EWW_CMD} update ${control}_reveal=true"
;     :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
;     (box
;         :space-evenly false
;         :orientation orientation
;         (revealer
;             :transition transition
;             :duration "300ms"
;             :reveal reveal
;             :class "reveal"
;             (eventbox :class "slider ${orientation}" (scale
;                 :orientation orientation
;                 :flipped {orientation == "v"}
;                 :value value
;                 :onchange onchange)))
;         (label
;             :class "${control} icon"
;             :text icon)
;     )
; ))
;
; (defwidget controls_icon [control reveal value icon style angle orientation transition visible] (eventbox
;     :visible visible
;     :onhover "${EWW_CMD} update ${control}_reveal=true"
;     :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
;     (box
;         :space-evenly false
;         :orientation orientation
;         (revealer
;             :transition transition
;             :duration "300ms"
;             :reveal reveal
;             :class "reveal"
;             (label
;                 :class "${style} ${control}"
;                 :angle angle
;                 :text value)
;         )
;         (label
;             :class "${style} ${control} icon"
;             :text icon)
;     )
; ))

